{"version":3,"sources":["components/Desk.module.css","assets/images/start-over.svg","assets/images/add.svg","assets/images/forward.svg","assets/images/back.svg","components/Student.module.css","views/VersionSelector.module.css","components/Room.module.css","components/Hamburger.module.css","components/Header.module.css","assets/images/desk.svg","assets/images/drag.svg","assets/images/delete.svg","assets/images/rotate.svg","assets/images/arrange.svg","assets/images/save.svg","assets/images/print.svg","app/appSlice.ts","utils/collection.ts","utils/data-id.ts","models/room.ts","models/brute-force-strategy.ts","models/desks.ts","models/strategy.ts","app/roomSlice.ts","models/students.ts","app/rootSlice.ts","components/Header.tsx","views/VersionSelector.tsx","utils/use-drag.ts","components/Desk.tsx","components/Room.tsx","views/DeskEditor.tsx","components/Student.tsx","views/StudentEditor.tsx","views/ReportViewer.tsx","components/Hamburger.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["module","exports","storage","saveRoomToStorage","room","version","createdAt","setItem","JSON","stringify","loadRoomFromStorage","itemVersion","getItem","Error","parse","appSlice","createSlice","name","initialState","expanded","versions","reducers","toggle","state","addVersion","action","push","payload","clearVersions","actions","saveVersion","dispatch","getState","a","app","map","r","id","includes","findInRelationship","relation","childId","related","Object","getOwnPropertyNames","parentId","Array","isArray","length","object","data","toArray","values","createDataId","uuid","buildRoom","Date","toISOString","desks","student","students","preferences","findStudentDesk","deskId","BruteForceStrategy","reduce","accumulator","prefStudent","distance","current","averageDistance","orderIndex","forEach","studentIndex","deskIndex","desk","assignStudent","keys","_","index","this","assignDesks","currentStudentIndex","currentDeskIndex","indexOf","previousTryIndex","original","previousTotal","totalAverageDistance","tryIndex","from","s1","s2","o1","o2","d1","d2","Math","sqrt","pow","x","y","newVersion","roomSlice","loadVersion","addDesk","angle","roomAddDesk","removeDesk","studentId","roomRemoveDesk","addStudent","roomAddStudent","removeStudent","roomRemoveStudent","moveDesk","reducer","prepare","rotateDesk","clearRoom","toggleNewVersion","editRoomName","addStudentPreference","preference","roomAddStudentPreference","removeStudentPreference","filter","p","roomRemoveStudentPreference","editStudentName","arrange","rootReducer","combineReducers","appReducer","roomReducer","selectCurrentRoom","selectAllDesks","createSelector","selectDeskCount","selectAllStudents","selectStudentCount","selectExpanded","selectIsEmpty","c1","c2","selectVersions","selectNewVersion","Header","className","styles","header","VersionSelector","menu","redirect","useDispatch","useSelector","onNewVersion","Promise","all","diff","slice","onLoadVersion","onClick","src","add","alt","key","toLocaleString","ribbon","href","width","height","bottom","useDrag","callback","useState","dragging","setDragging","callbacks","useRef","moveCallback","event","finishCallback","useEffect","move","finish","moveEvent","preventDefault","stopPropagation","func","finishEvent","document","body","addEventListener","removeEventListener","RADIANS_TO_DEGREES","PI","eventCoordinates","changedTouches","touches","_event","touchList","clientX","clientY","Desk","editable","rotate","remove","editDimension","container","rotating","setRotating","dragTrigger","final","clientCoordinates","_dragging","assign","client","parentRect","elementRect","rotateTrigger","_rotating","center","d","atan2","rotation","start","onDragStart","element","target","classList","contains","offsetLeft","offsetTop","parentElement","getBoundingClientRect","onRotateStart","rotateHandle","rect","left","top","observer","ResizeObserver","entries","entry","contentRect","observe","disconnect","style","transform","mainClasses","active","rotateHandleClasses","ref","onMouseDown","onTouchStart","title","icon","deskImage","dragHandle","dragImage","deleteHandle","deleteImage","rotateImage","clear","Room","onBlur","onKeyDown","editName","deskEditDimension","innerText","keyCode","blur","contentEditable","suppressContentEditableWarning","studentName","DeskEditor","roomDimension","setRoomDimension","desksDimension","setDesksDimension","readyToArrange","setReadyToArrange","deskCount","allDesks","isEmpty","onStartOver","onArrange","useCallback","containerRect","deskRect","maxColumns","floor","maxRows","columns","rows","column","row","onEditDimension","previous","onDeskEditDimension","dimensions","b","forward","startOver","Student","addPreference","removePreference","studentOptions","s","label","value","preferenceOptions","option","type","onChange","placeholder","labelledBy","options","overrideStrings","selectSomeItems","disableSearch","hasSelectAll","isLoading","selected","existingPreferences","changedPreferences","select","newPreferences","preferenceChange","multiselect","StudentEditor","onEditName","onAddPreference","onRemovePreference","back","ReportViewer","onPrint","window","print","onSave","localStorage","alert","save","Hamburger","classes","hamburger","role","aria-pressed","App","history","useHistory","onToggle","onRedirect","path","store","configureStore","startsWith","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49457a85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"desk\":\"Desk_desk__zwXqB\",\"icon\":\"Desk_icon__pt39G\",\"container\":\"Desk_container__1WqRW\",\"editable\":\"Desk_editable__MFFAW\",\"active\":\"Desk_active__1or59\",\"dragHandle\":\"Desk_dragHandle__xnPxO\",\"deleteHandle\":\"Desk_deleteHandle__DHyGl\",\"name\":\"Desk_name__2Ho38\",\"rotateHandle\":\"Desk_rotateHandle__wDMEl\",\"clear\":\"Desk_clear__kn0up\"};","module.exports = __webpack_public_path__ + \"static/media/start-over.0e232086.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.dfcc83ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/forward.72ada97a.svg\";","module.exports = __webpack_public_path__ + \"static/media/back.009be469.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"student\":\"Student_student__2093n\",\"name\":\"Student_name__35xId\",\"multiselect\":\"Student_multiselect__289JG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ribbon\":\"VersionSelector_ribbon__1FXKS\",\"bottom\":\"VersionSelector_bottom__3W1vH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"room\":\"Room_room__22eJE\",\"name\":\"Room_name__Lh7Yo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hamburger\":\"Hamburger_hamburger__jbph_\",\"expanded\":\"Hamburger_expanded__2BZ8y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3mObx\"};","module.exports = __webpack_public_path__ + \"static/media/desk.166fef72.svg\";","module.exports = __webpack_public_path__ + \"static/media/drag.23dd63ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.e7403043.svg\";","module.exports = __webpack_public_path__ + \"static/media/rotate.8ed0114e.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrange.88ef8655.svg\";","module.exports = __webpack_public_path__ + \"static/media/save.72c46d2a.svg\";","module.exports = __webpack_public_path__ + \"static/media/print.1e46e84a.svg\";","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Room } from '../models/room';\nimport { AppThunk } from './store';\n\nconst VERSION_PREFIX = 'sssg-';\n\nconst saveRoomToStorage = (storage: Storage, room: Room): void => {\n  const version = room.createdAt;\n\n  storage.setItem(`${VERSION_PREFIX}${version}`, JSON.stringify(room));\n};\n\nconst loadRoomFromStorage = (storage: Storage, version: string): Room => {\n  const itemVersion = storage.getItem(`${version}`);\n  if (!itemVersion) {\n    throw new Error('Missing correctly formatted data in local storage');\n  }\n\n  return JSON.parse(itemVersion) as Room;\n};\n\ninterface AppState {\n  expanded: boolean;\n  versions: Room[];\n}\n\nconst initialState: AppState = {\n  expanded: false,\n  versions: []\n};\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    toggle: (state: AppState) => {\n      state.expanded = !state.expanded\n    },\n    addVersion: (state: AppState, action: PayloadAction<Room>) => {\n      state.versions.push(action.payload);\n    },\n    clearVersions: (state: AppState) => {\n      state.versions = [];\n    }\n  }\n});\n\nexport const {\n  toggle,\n  addVersion,\n  clearVersions\n} = appSlice.actions;\n\nexport default appSlice.reducer;\n\nexport const loadVersions = (storage: Storage): AppThunk => async (dispatch) => {\n  dispatch(clearVersions());\n  [...Array(storage.length)].map((_, index) => storage.key(index))\n    .filter(version => version && version.startsWith(VERSION_PREFIX))\n    .forEach((version) => {\n      if (!version) {\n        return;\n      }\n\n      //try {\n      const room = loadRoomFromStorage(storage, version);\n      dispatch(addVersion(room));\n      //}\n      //catch (err) {\n      //TODO wrong place for this\n      //  console.error(err);\n      //}\n    });\n}\n\nexport const saveVersion = (storage: Storage, room: Room): AppThunk => async (dispatch, getState) => {\n  saveRoomToStorage(storage, room);\n\n  //Add version if new\n  if (!getState().app.versions.map(r => r.id).includes(room.id)) {\n    dispatch(addVersion(room));\n  }\n}\n","import { Data, CoreBase } from '../models/general';\n\n/**\n * Find parent containing child relationship\n *\n * @param {Object} relation\n * @param {string} childId\n * @return {string}\n */\nexport const findInRelationship = (relation: { [index: string]: string | string[] | null }, childId: string): string | null => {\n  let related;\n\n  for (const parentId of Object.getOwnPropertyNames(relation)) {\n    related = relation[parentId];\n    if ((Array.isArray(related) && related.includes(childId)) || related === childId) {\n      return parentId;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Length of a object with a data element\n *\n * @param {Object} object\n * @return {number}\n */\nexport const length = <T extends CoreBase>(object: Data<T>): number => {\n  return Object.getOwnPropertyNames(object.data).length;\n}\n\n/**\n *\n * @param object\n */\nexport const toArray = <T extends CoreBase>(object: Data<T>): T[] => {\n  return Object.values(object.data);\n}\n","import { v4 as uuid } from 'uuid';\n\n/**\n * Create new unique identifier\n *\n * @returns string\n */\nconst createDataId = uuid;\n\nexport default createDataId;\n","import { Desks, CoreDesk } from './desks';\nimport { Students, CoreStudent } from './students';\nimport { CoreBase } from './general';\nimport createDataId from '../utils/data-id';\nimport { length, findInRelationship } from '../utils/collection';\n\nexport interface Room extends CoreBase {\n  name: string;\n  createdAt: string;\n  desks: Desks;\n  students: Students;\n}\n\n/**\n * Creates a new room\n *\n * @returns Room\n */\nexport const buildRoom = (): Room => {\n  return {\n    id: createDataId(),\n    name: 'Room',\n    createdAt: new Date().toISOString(),\n    desks: {\n      data: {},\n      student: {}\n    },\n    students: {\n      data: {},\n      preferences: {}\n    }\n  };\n};\n\n/**\n * Adds desk to room\n *\n * @param Room room\n * @returns CoreDesk\n */\nexport const addDesk = (room: Room): CoreDesk => {\n  const id = createDataId();\n  const desk: CoreDesk = {\n    id,\n    x: 0,\n    y: 0,\n    angle: 0\n  };\n  room.desks.data[id] = desk;\n  room.desks.student[id] = null;\n\n  return desk;\n};\n\n/**\n * Adds student to room\n *\n * @param Room room\n * @returns CoreStudent\n */\nexport const addStudent = (room: Room): CoreStudent => {\n  const id = createDataId();\n  const student: CoreStudent = {\n    id,\n    name: `Student ${length(room.students) + 1}`\n  };\n  room.students.data[id] = student;\n  room.students.preferences[id] = [];\n\n  return student;\n};\n\n/**\n * Removes a desk from a room\n *\n * @param Room room\n * @param CoreDesk desk\n */\nexport const removeDesk = (room: Room, desk: CoreDesk): void => {\n  const studentId = room.desks.student[desk.id];\n\n  delete room.desks.data[desk.id];\n  delete room.desks.student[desk.id];\n\n  if (studentId) {\n    delete room.students.data[studentId];\n    delete room.students.preferences[studentId];\n  }\n}\n\n/**\n * Removes a student from a room\n *\n * @param Room room\n * @param CoreStudent student\n */\nexport const removeStudent = (room: Room, student: CoreStudent): void => {\n  delete room.students.data[student.id];\n  delete room.students.preferences[student.id];\n\n  const deskId = findInRelationship(room.desks.student, student.id);\n  if (deskId) {\n    delete room.desks.data[deskId];\n    delete room.desks.student[deskId];\n  }\n}\n\n/**\n * Finds a desk that a student is assigned to\n *\n * @param Room room\n * @param CoreStudent student\n * @returns CoreDesk|null\n */\nexport const findStudentDesk = (room: Room, student: CoreStudent): CoreDesk | null => {\n  const deskId = findInRelationship(room.desks.student, student.id);\n  if (deskId) {\n    return room.desks.data[deskId];\n  }\n  return null;\n}\n","import Strategy from './strategy';\nimport { CoreStudent } from './students';\nimport { Room } from './room';\nimport { toArray } from '../utils/collection';\nimport { assignStudent } from './desks';\n//import Combinatorics from 'js-combinatorics';\n\nexport default class BruteForceStrategy extends Strategy {\n  /**\n   *\n   * @param Room room\n   * @param Student student\n   * @returns number\n   */\n  averageDistance(room: Room, student: CoreStudent) {\n    const preferences = room.students.preferences[student.id];\n    if (preferences.length === 0) {\n      return 0.0;\n    }\n    const total = preferences.reduce((accumulator, prefStudent) => accumulator + this.distance(room, student, room.students.data[prefStudent]), 0.0);\n    return total / preferences.length;\n  }\n\n  /**\n   *\n   * @param Room room\n   */\n  totalAverageDistance(room: Room) {\n    return toArray(room.students).reduce((accumulator, current) => accumulator + this.averageDistance(room, current), 0.0);\n  }\n\n  /**\n   *\n   * @param Room room\n   * @param number[] orderIndex\n   */\n  assignDesks(room: Room, orderIndex: number[]) {\n    orderIndex.forEach((studentIndex, deskIndex) => {\n      const desk = toArray(room.desks)[deskIndex];\n      const student = toArray(room.students)[studentIndex];\n      assignStudent(room, desk, student);\n    });\n  }\n\n  /**\n   * Initially start with all students in order added.  Arrange by going\n   * through each student and placing in new desk and checking the total\n   * average for each student to see if it decreases.\n   *\n   * @param Room room\n   * @todo Needs to be optimized\n   */\n  arrange(room: Room) {\n    /**\n     * Indexes used to try arrangements.\n     *\n     * [\n     *  Desk => Student\n     * ]\n     */\n    let orderIndex = [...Array(Object.keys(room.students.data).length)].map((_, index) => index);\n\n    //Initial assignment\n    this.assignDesks(room, orderIndex);\n\n    //Go through each student\n    toArray(room.students).forEach((_, currentStudentIndex) => {\n      //Find current desk for student\n      const currentDeskIndex = orderIndex.indexOf(currentStudentIndex);\n\n      //Find the lowest total average order\n      orderIndex = orderIndex.reduce((previousTryIndex, studentIndex, deskIndex, original) => {\n        //Calculate previous total\n        this.assignDesks(room, previousTryIndex);\n        let previousTotal = this.totalAverageDistance(room);\n\n        //Swap student indexes with desks and calculate total\n        const tryIndex = Array.from(original);\n        tryIndex[deskIndex] = original[currentDeskIndex];\n        tryIndex[currentDeskIndex] = studentIndex;\n        this.assignDesks(room, tryIndex);\n        let newTotal = this.totalAverageDistance(room);\n\n        //Use new arrangement only if total is less\n        return newTotal < previousTotal ? tryIndex : previousTryIndex;\n      }, orderIndex);\n\n      //Assign new arrangement\n      this.assignDesks(room, orderIndex);\n    });\n  }\n}\n","import { Data, CoreBase, SingleRelationship } from './general';\nimport { Room } from './room';\nimport { CoreStudent } from './students';\n\nexport interface CoreDesk extends CoreBase {\n  x: number;\n  y: number;\n  angle: number;\n}\n\nexport interface Desks extends Data<CoreDesk> {\n  student: SingleRelationship\n}\n\n/**\n * Calculate distance between desks\n *\n * @param CoreDesk o1\n * @param CoreDesk o2\n * @returns number\n */\nexport const distance = (o1: CoreDesk, o2: CoreDesk): number => {\n  return Math.sqrt(\n    Math.pow(o2.x - o1.x, 2) + Math.pow(o2.y - o1.y, 2)\n  );\n}\n\n/**\n * Assign student (or resets) to desk\n *\n * @param Room room\n * @param Desk desk\n * @param Student student\n */\nexport const assignStudent = (room: Room, desk: CoreDesk, student: CoreStudent | null): void => {\n  room.desks.student[desk.id] = student ? student.id : null;\n};\n","import { Room, findStudentDesk } from './room';\nimport { CoreStudent } from './students';\nimport { distance } from './desks';\n\nexport default class Strategy {\n  /**\n   * Arrange a room\n   *\n   * @param Room room\n   */\n  arrange(room: Room) {\n  }\n\n  /**\n   * Calculate distance between students\n   *\n   * @param Room room\n   * @param CoreStudent s1\n   * @param CoreStudent s2\n   * @returns number\n   */\n  distance(room: Room, s1: CoreStudent, s2: CoreStudent) {\n    const d1 = findStudentDesk(room,  s1),\n      d2 = findStudentDesk(room, s2);\n\n    if (!d1 || !d2) {\n      return 0.0;\n    }\n\n    return distance(d1, d2);\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from './store';\nimport { length } from '../utils/collection';\nimport { Room, buildRoom, addDesk as roomAddDesk, removeDesk as roomRemoveDesk, addStudent as roomAddStudent, removeStudent as roomRemoveStudent } from '../models/room';\nimport { addStudentPreference as roomAddStudentPreference, removeStudentPreference as roomRemoveStudentPreference } from '../models/students';\nimport BruteForceStrategy from '../models/brute-force-strategy';\n\nconst INITIAL_DESKS = 6;\n\ninterface RoomState {\n  current: Room;\n  newVersion: boolean;\n}\n\ninterface MoveDeskPayload {\n  id: string;\n  x: number;\n  y: number;\n}\n\ninterface RotateDeskPayload {\n  id: string;\n  angle: number;\n}\n\ninterface EditDimensionPayload {\n  width: number;\n  height: number;\n}\n\ninterface StudentPreferencePayload {\n  id: string;\n  preference: string;\n}\n\ninterface StudentNameChange {\n  id: string;\n  name: string;\n}\n\nconst initialState: RoomState = {\n  current: buildRoom(),\n  newVersion: true\n};\n\nconst roomSlice = createSlice({\n  name: 'room',\n  initialState,\n  reducers: {\n    loadVersion: (state: RoomState, action: PayloadAction<Room>) => {\n      state.current = action.payload;\n      state.newVersion = false;\n    },\n    addDesk: (state: RoomState) => {\n      roomAddDesk(state.current);\n    },\n    removeDesk: (state: RoomState, action: PayloadAction<string>) => {\n      const desk = state.current.desks.data[action.payload];\n      roomRemoveDesk(state.current, desk);\n    },\n    addStudent: (state: RoomState) => {\n      roomAddStudent(state.current);\n    },\n    removeStudent: (state: RoomState, action: PayloadAction<string>) => {\n      const student = state.current.students.data[action.payload];\n      roomRemoveStudent(state.current, student);\n    },\n    moveDesk: {\n      reducer: (state: RoomState, action: PayloadAction<MoveDeskPayload>) => {\n        const desk = state.current.desks.data[action.payload.id];\n        desk.x = action.payload.x;\n        desk.y = action.payload.y;\n      },\n      prepare: (desk: string, x: number, y: number) => {\n        return {\n          payload: {\n            id: desk, x, y\n          }\n        };\n      }\n    },\n    rotateDesk: {\n      reducer: (state: RoomState, action: PayloadAction<RotateDeskPayload>) => {\n        const desk = state.current.desks.data[action.payload.id];\n        desk.angle = action.payload.angle;\n      },\n      prepare: (desk: string, angle: number) => {\n        return {\n          payload: {\n            id: desk, angle\n          }\n        };\n      }\n    },\n    clearRoom: (state: RoomState) => {\n      state.current = buildRoom();\n    },\n    toggleNewVersion: (state: RoomState, action: PayloadAction<boolean>) => {\n      state.newVersion = action.payload;\n    },\n    editRoomName: (state: RoomState, action: PayloadAction<string>) => {\n      state.current.name = action.payload;\n    },\n    addStudentPreference: (state: RoomState, action: PayloadAction<StudentPreferencePayload>) => {\n      const student = state.current.students.data[action.payload.id];\n      const preference = state.current.students.data[action.payload.preference];\n      roomAddStudentPreference(state.current, student, preference);\n    },\n    removeStudentPreference: (state: RoomState, action: PayloadAction<StudentPreferencePayload>) => {\n      const student = state.current.students.data[action.payload.id];\n      const preference = state.current.students.data[action.payload.preference];\n      roomRemoveStudentPreference(state.current, student, preference);\n    },\n    editStudentName: (state: RoomState, action: PayloadAction<StudentNameChange>) => {\n      state.current.students.data[action.payload.id].name = action.payload.name;\n    },\n    arrange: (state: RoomState) => {\n      new BruteForceStrategy().arrange(state.current);\n    }\n  }\n});\n\nexport const {\n  loadVersion,\n  removeDesk,\n  addDesk,\n  removeStudent,\n  addStudent,\n  moveDesk,\n  rotateDesk,\n  editRoomName,\n  toggleNewVersion,\n  addStudentPreference,\n  removeStudentPreference,\n  editStudentName,\n  arrange\n} = roomSlice.actions;\n\nexport default roomSlice.reducer;\n\n/**\n *\n */\nexport const normalize = (): AppThunk => (dispatch, getState) => {\n  const state = getState();\n  const diff = length(state.room.current.desks)\n    - length(state.room.current.students);\n\n  if (diff < 0) {\n    Object.getOwnPropertyNames(state.room.current.students.data).slice(diff).forEach((student: string) => dispatch(removeStudent(student)));\n  }\n  else if (diff > 0) {\n    [...Array(diff)].forEach(() => dispatch(addStudent()));\n  }\n};\n\n/**\n *\n */\nexport const newVersion = (): AppThunk => async (dispatch) => {\n  await dispatch(roomSlice.actions.clearRoom());\n  await dispatch(roomSlice.actions.toggleNewVersion(true));\n\n  await Promise.all([...Array(INITIAL_DESKS)].map(async () => {\n    return dispatch(addDesk());\n  }));\n\n  await dispatch(normalize());\n}\n","import { Data, CoreBase, MultipleRelationship } from './general';\nimport { Room } from './room';\n\nexport interface CoreStudent extends CoreBase {\n  name: string;\n}\n\nexport interface Students extends Data<CoreStudent> {\n  preferences: MultipleRelationship\n}\n\n/**\n * Add a student preference\n *\n * @param Room room\n * @param CoreStudent student\n * @param CoreStudent preference\n */\nexport const addStudentPreference = (room: Room, student: CoreStudent, preference: CoreStudent): void => {\n  const preferences = room.students.preferences[student.id];\n  if (!preferences.includes(preference.id)) {\n    preferences.push(preference.id);\n  }\n}\n\n/**\n * Remove a student preference\n *\n * @param Room room\n * @param CoreStudent student\n * @param CoreStudent preference\n */\nexport const removeStudentPreference = (room: Room, student: CoreStudent, preference: CoreStudent): void => {\n  const preferences = room.students.preferences[student.id];\n  room.students.preferences[student.id] = preferences.filter(p => p !== preference.id);\n}\n","import { combineReducers, createSelector } from '@reduxjs/toolkit';\nimport appReducer from './appSlice';\nimport roomReducer from './roomSlice';\nimport { Room } from '../models/room';\nimport { CoreDesk } from '../models/desks';\nimport { toArray } from '../utils/collection';\nimport { CoreStudent } from '../models/students';\n\nconst rootReducer = combineReducers({\n  app: appReducer,\n  room: roomReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n//Room selectors\nexport const selectCurrentRoom = (state: RootState): Room => state.room.current;\nexport const selectName = createSelector(selectCurrentRoom, (room: Room): string => {\n  return room.name;\n});\n\n//Desk selectors\nexport const selectAllDesks = createSelector(selectCurrentRoom, (room: Room): CoreDesk[] => {\n  return toArray(room.desks);\n});\nexport const selectDeskCount = createSelector(selectAllDesks, (desks: CoreDesk[]): number => {\n  return desks.length;\n});\n\n//Student selectors\nexport const selectAllStudents = createSelector(selectCurrentRoom, (room: Room): CoreStudent[] => {\n  return toArray(room.students);\n});\nexport const selectStudentCount = createSelector(selectAllStudents, (students: CoreStudent[]): number => {\n  return students.length;\n});\n\n// //General\nexport const selectExpanded = (state: RootState): boolean => state.app.expanded;\nexport const selectIsEmpty = createSelector([selectDeskCount, selectStudentCount], (c1: number, c2: number): boolean => {\n  return c1 === 0 && c2 === 0;\n});\nexport const selectVersions = (state: RootState): Room[] => state.app.versions;\nexport const selectNewVersion = (state: RootState): boolean => state.room.newVersion;\n\nexport default rootReducer;\n","import React, { FunctionComponent } from 'react';\nimport styles from './Header.module.css'\n\nconst Header: FunctionComponent = () => {\n  return (\n    <header className={styles.header}>\n      <h1>Student Selected Seating Generator</h1>\n    </header>\n  );\n};\nexport default Header;\n","import React, { ReactNode } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVersions } from '../app/rootSlice';\nimport { newVersion, loadVersion } from '../app/roomSlice';\nimport Header from '../components/Header';\nimport styles from './VersionSelector.module.css';\nimport add from '../assets/images/add.svg';\nimport { Room } from '../models/room';\n\ninterface VersionSelectorProps {\n  menu: ReactNode;\n  redirect: (path: string) => void;\n}\n\nconst VersionSelector = ({\n  menu,\n  redirect\n}: VersionSelectorProps) => {\n  const dispatch = useDispatch();\n  const versions = useSelector(selectVersions);\n\n  const onNewVersion = async () => {\n    await dispatch(newVersion());\n    redirect('/desks');\n  };\n  const onLoadVersion = async (version: Room) => {\n    await dispatch(loadVersion(version));\n    redirect('/desks');\n  };\n\n  return (\n    <div className=\"view-version-selector\">\n      {menu}\n      <nav className=\"pure-menu\">\n        <Header />\n        <p>Let's get started!</p>\n        <ul className=\"pure-menu-list\">\n          <li className=\"pure-menu-item pure-menu-link menu-new\" onClick={onNewVersion}>\n            <img src={add} alt=\"New\" /> New\n          </li>\n        </ul>\n        <h3>Saved</h3>\n        <ul className=\"pure-menu-list menu-bottom\">\n          {versions.map(version => {\n            return (\n              <li className=\"pure-menu-item pure-menu-link\" key={version.id} onClick={() => { onLoadVersion(version) }}>\n                {version.name} Created on {new Date(version.createdAt).toLocaleString()}\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      <main>\n        <div className={styles.ribbon}>\n          <a href=\"https://github.com/carsonreinke/student-selected-seating-generator-react\">\n            <img\n              width=\"149\"\n              height=\"149\"\n              src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_gray_6d6d6d.png?resize=149%2C149\"\n              alt=\"Fork me on GitHub\"\n            />\n          </a>\n        </div>\n\n        <h2>Welcome</h2>\n        <p>This a simple tool to help teachers arrange students in a classroom based on their own preferences for each other. Students will be automatically selected for a particular desk based on proximity of their preferences.</p>\n        <p>\n          A note on <b>privacy</b>, this tool has no tracking/analytics and all data saved is on your local web browser.\n        </p>\n\n        <p className={styles.bottom}>\n          Built by <a href=\"https://reinke.co/\">Carson Reinke</a>\n        </p>\n      </main>\n    </div>\n  );\n};\nexport default VersionSelector;\n","import { useRef, useEffect, useState } from 'react';\n\ntype MouseOrTouchEvent = MouseEvent | TouchEvent;\ntype InternalCallback = (event: MouseOrTouchEvent) => void;\ntype ExternalCallback = (event: MouseOrTouchEvent, final: boolean) => void;\ntype ExternalTrigger = () => void;\n\ninterface Callbacks {\n  move: InternalCallback;\n  finish: InternalCallback;\n};\n\n// Dragging effect using trigger and event callbacks\n//\n// Based on https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nconst useDrag: (\n  externalCallback: ExternalCallback\n) => ExternalTrigger = (callback) => {\n  // Track if currently dragging or not\n  const [dragging, setDragging] = useState<boolean>(false);\n  // Reference to call backs bound to state\n  const callbacks = useRef<Callbacks>();\n\n  const startTrigger = () => {\n    setDragging(true);\n  }\n  const moveCallback: InternalCallback = (event) => {\n    callback(event, false);\n  };\n  const finishCallback: InternalCallback = (event) => {\n    setDragging(false);\n    callback(event, true)\n  };\n\n  // Initialize ref var with new state bound callbacks\n  useEffect(() => {\n    callbacks.current = {\n      move: moveCallback,\n      finish: finishCallback\n    };\n  });\n\n  useEffect(() => {\n    // If not dragging, don't setup any events\n    if (!dragging) {\n      return () => { };\n    }\n\n    const moveEvent = (event: MouseOrTouchEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      const func = callbacks.current?.move;\n      if (func) { func(event); }\n    };\n    const finishEvent = (event: MouseOrTouchEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      const func = callbacks.current?.finish;\n      if (func) { func(event); }\n    };\n\n    document.body.addEventListener('mousemove', moveEvent);\n    document.body.addEventListener('mouseup', finishEvent);\n    document.body.addEventListener('touchmove', moveEvent);\n    document.body.addEventListener('touchend', finishEvent);\n\n    return () => {\n      document.body.removeEventListener('mousemove', moveEvent);\n      document.body.removeEventListener('mouseup', finishEvent);\n      document.body.removeEventListener('touchmove', moveEvent);\n      document.body.removeEventListener('touchend', finishEvent);\n    };\n  }, [dragging] /*Dependent on state of dragging*/);\n\n  return startTrigger;\n}\n\nexport default useDrag;\n","import React, { useState, DragEvent as ReactDragEvent, TouchEvent as ReactTouchEvent, MouseEvent as ReactMouseEvent, useEffect, useRef } from 'react';\nimport { CoreDesk } from '../models/desks';\nimport { Dimension } from '../models/general';\nimport styles from './Desk.module.css';\nimport deskImage from '../assets/images/desk.svg';\nimport dragImage from '../assets/images/drag.svg';\nimport deleteImage from '../assets/images/delete.svg';\nimport rotateImage from '../assets/images/rotate.svg';\nimport useDrag from '../utils/use-drag';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst RADIANS_TO_DEGREES = 180.0 / Math.PI;\n\ninterface Coordinates {\n  x: number;\n  y: number;\n}\n\ninterface DragMeta extends Coordinates {\n  client: Coordinates\n  parentRect?: DOMRect;\n  elementRect: DOMRect;\n}\n\ninterface RotationMeta {\n  angle: number;\n  rotation: number;\n  start: number;\n  center: Coordinates;\n}\n\n/**\n * Return the coordinates based on the event\n */\nconst eventCoordinates = (\n  event: ReactMouseEvent | ReactDragEvent | ReactTouchEvent | MouseEvent | TouchEvent,\n  changedTouches: boolean = false\n): Coordinates => {\n  // Hack to check what type of event\n  if (typeof (event as TouchEvent).touches !== 'undefined') {\n    const _event = event as TouchEvent;\n    const touchList: TouchList = changedTouches ? _event.changedTouches : _event.touches;\n    return { x: touchList[0].clientX, y: touchList[0].clientY };\n  } else if (typeof (event as MouseEvent).clientX !== 'undefined') {\n    const _event = event as MouseEvent;\n    return { x: _event.clientX, y: _event.clientY };\n  } else {\n    throw new Error(`Invalid argument: ${event}`);\n  }\n};\n\ninterface DeskProps {\n  editable?: boolean;\n  name?: string;\n  desk: CoreDesk;\n  move?: (id: string, x: number, y: number) => void;\n  rotate?: (id: string, angle: number) => void;\n  remove?: (id: string) => void;\n  editDimension?: (id: string, rect: Dimension) => void;\n};\n\nconst Desk = ({\n  editable = false,\n  desk,\n  name = 'Student',\n  move,\n  rotate,\n  remove,\n  editDimension\n}: DeskProps) => {\n  const container = useRef<HTMLDivElement>(null);\n  const [dragging, setDragging] = useState<DragMeta | null>(null),\n    [rotating, setRotating] = useState<RotationMeta | null>(null);\n\n  // Custom hook for dragging\n  const dragTrigger = useDrag((event, final) => {\n    if (!dragging) {\n      return;\n    }\n\n    const clientCoordinates = eventCoordinates(event, true);\n    const _dragging = Object.assign({}, dragging);\n\n    // Calculate new position relative to old position\n    let x = clientCoordinates.x - dragging.client.x + dragging.x,\n      y = clientCoordinates.y - dragging.client.y + dragging.y;\n\n    //Ensure position not too far left/top\n    if (x < 0) {\n      x = 0;\n    }\n    if (y < 0) {\n      y = 0;\n    }\n\n    //Ensure position not too far bottom/right\n    if (dragging.parentRect) {\n      if (x > dragging.parentRect.width - dragging.elementRect.width) {\n        x = dragging.parentRect.width - dragging.elementRect.width;\n      }\n      if (y > dragging.parentRect.height - dragging.elementRect.height) {\n        y = dragging.parentRect.height - dragging.elementRect.height;\n      }\n    }\n\n    // Apply latest position\n    _dragging.x = x;\n    _dragging.y = y;\n    _dragging.client = clientCoordinates;\n\n    if (final) {\n      setDragging(null);\n      if (move) {\n        move(desk.id, x, y);\n      }\n    }\n    else {\n      setDragging(_dragging);\n    }\n  });\n\n  // Custom hook for rotating\n  const rotateTrigger = useDrag((event, final) => {\n    if (!rotating) {\n      return;\n    }\n\n    const clientCoordinates = eventCoordinates(event, true);\n    const _rotating = Object.assign({}, rotating);\n\n    // Apply latest rotation\n    const x = clientCoordinates.x - _rotating.center.x;\n    const y = clientCoordinates.y - _rotating.center.y;\n    const d = RADIANS_TO_DEGREES * Math.atan2(y, x);\n    _rotating.rotation = d - _rotating.start;\n\n    if (final) {\n      setRotating(null);\n      // Update external state only after finalizing\n      if (rotate) {\n        rotate(\n          desk.id,\n          _rotating.angle + _rotating.rotation\n        );\n      }\n    }\n    else {\n      setRotating(_rotating);\n    }\n  });\n\n  // Event handlers\n  const onDragStart = (event: ReactMouseEvent | ReactTouchEvent) => {\n    const element = event.target as HTMLElement;\n\n    // Check to ensure we are dragging on the desk\n    if (!element.classList.contains(styles.desk)) {\n      return;\n    }\n\n    setDragging({\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      client: eventCoordinates(event),\n      parentRect: element.parentElement?.getBoundingClientRect(),\n      elementRect: element.getBoundingClientRect()\n    })\n\n    // Trigger dragging monitoring\n    dragTrigger();\n  };\n  const onRemove = (event: ReactMouseEvent) => {\n    if (remove) {\n      remove(desk.id);\n    }\n  };\n  const onRotateStart = (event: ReactMouseEvent | ReactTouchEvent) => {\n    // Concept copied from https://bl.ocks.org/joyrexus/7207044\n    const element = event.target as HTMLElement;\n\n    // Check first to see if dragging on the rotate handle\n    if (element.classList.contains(styles.rotateHandle)) {\n      return;\n    }\n\n    const rect = element.parentElement?.parentElement?.getBoundingClientRect();\n\n    // Check for missing element, if so just exit\n    if (!rect) {\n      return;\n    }\n\n    const clientCoordinates = eventCoordinates(event);\n    const clientX = clientCoordinates.x,\n      clientY = clientCoordinates.y;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Setup object of data used for rotating\n    const rotating = {\n      angle: desk.angle,\n      rotation: 0.0,\n      start: 0.0,\n      center: {\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2\n      }\n    };\n    const x = clientX - rotating.center.x,\n      y = clientY - rotating.center.y;\n    rotating.start = RADIANS_TO_DEGREES * Math.atan2(y, x);\n\n    setRotating(rotating);\n\n    // Trigger dragging monitoring\n    rotateTrigger();\n  };\n\n  // Provide dimensions to callback\n  useEffect(() => {\n    if (!editDimension) {\n      return;\n    }\n\n    const observer = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        editDimension(desk.id, entry.contentRect);\n      }\n    });\n    observer.observe(container.current as HTMLElement);\n\n    return () => observer.disconnect();\n  }, [editDimension, desk.id]);\n\n  // Create styles and classes for based on state\n  const style = {\n    left: (dragging ? dragging.x : desk.x) + 'px',\n    top: (dragging ? dragging.y : desk.y) + 'px',\n    transform: 'rotate(' + (rotating ? (rotating.angle + rotating.rotation) : desk.angle) + 'deg)'\n  };\n\n  let mainClasses = styles.desk;\n  if (editable) {\n    mainClasses += ' ' + styles.editable;\n  }\n  if (dragging !== null) {\n    mainClasses += ' ' + styles.active;\n  }\n  let rotateHandleClasses = styles.rotateHandle;\n  if (rotating !== null) {\n    rotateHandleClasses += ' ' + styles.rotateHandle;\n  }\n\n  return (\n    <div\n      ref={container}\n      className={mainClasses}\n      style={style}\n      onMouseDown={onDragStart}\n      onTouchStart={onDragStart}\n      title={name}>\n      <div className={styles.icon}>\n        <img alt=\"\" src={deskImage} />\n      </div>\n      <div className={styles.container}>\n        <div className={styles.dragHandle}>\n          {editable &&\n            <img alt=\"Drag Me\" src={dragImage} />\n          }\n        </div>\n        <div className={styles.deleteHandle}>\n          {editable &&\n            <img\n              alt=\"Delete\"\n              src={deleteImage}\n              onClick={onRemove} />\n          }\n        </div>\n        <div className={styles.name}>{name}</div>\n\n        <div className={rotateHandleClasses}>\n          {editable &&\n            <img\n              alt=\"Rotate Me\"\n              src={rotateImage}\n              onMouseDown={onRotateStart}\n              onTouchStart={onRotateStart} />\n          }\n        </div>\n        <div className={styles.clear}></div>\n      </div >\n    </div >\n  );\n};\nexport default Desk;\n","import React, { KeyboardEvent, FocusEvent, useRef, useEffect } from 'react';\nimport styles from './Room.module.css';\nimport Desk from './Desk';\nimport { toArray } from '../utils/collection';\nimport { Room as ModelRoom } from '../models/room';\nimport { Dimension } from '../models/general';\nimport ResizeObserver from 'resize-observer-polyfill';\n\ninterface RoomProps {\n  editable: boolean;\n  room: ModelRoom;\n  moveDesk?: (id: string, x: number, y: number) => void;\n  rotateDesk?: (id: string, angle: number) => void;\n  removeDesk?: (id: string) => void;\n  editName?: (name: string) => void;\n  editDimension?: (rect: Dimension) => void;\n  deskEditDimension?: (id: string, rect: Dimension) => void;\n};\n\nconst Room = ({\n  editable,\n  room,\n  moveDesk,\n  rotateDesk,\n  removeDesk,\n  editName,\n  editDimension,\n  deskEditDimension\n}: RoomProps) => {\n  const container = useRef<HTMLDivElement>(null);\n  let onBlur, onKeyDown;\n\n  if (editable) {\n    onBlur = (event: FocusEvent) => {\n      if (editName) {\n        editName((event.target as HTMLElement).innerText);\n      }\n    };\n    onKeyDown = (event: KeyboardEvent) => {\n      // Ignore everything except \"Enter\"\n      if (event.keyCode !== 13) {\n        return;\n      }\n\n      event.preventDefault();\n      (event.target as HTMLElement).blur();\n    };\n  }\n  else {\n    onBlur = onKeyDown = () => { };\n  }\n\n  // Provide dimensions to callback\n  useEffect(() => {\n    if (!editDimension) {\n      return;\n    }\n\n    const observer = new ResizeObserver((entries) => {\n      for (let entry of entries) {\n        editDimension(entry.contentRect);\n      }\n    });\n    observer.observe(container.current as HTMLElement);\n\n    return () => observer.disconnect();\n  }, [editDimension]);\n\n  return (\n    <div ref={container} className={styles.room}>\n      <div className={styles.name}>\n        <h2 contentEditable={editable} suppressContentEditableWarning={true} onBlur={onBlur} onKeyDown={onKeyDown}>{room.name}</h2>\n      </div>\n      {toArray(room.desks).map(desk => {\n        let studentName;\n        const studentId = room.desks.student[desk.id];\n        if (studentId) {\n          studentName = room.students.data[studentId].name;\n        }\n\n        return (\n          <Desk key={desk.id} desk={desk} editable={editable} name={studentName} move={moveDesk} rotate={rotateDesk} remove={removeDesk} editDimension={deskEditDimension} />\n        );\n      })}\n    </div>\n  );\n}\nexport default Room;\n","import React, { ReactNode, useState, useCallback, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Room from '../components/Room';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentRoom, selectDeskCount, selectAllDesks, selectNewVersion, selectIsEmpty } from '../app/rootSlice';\nimport { moveDesk, rotateDesk, removeDesk, editRoomName, addDesk, toggleNewVersion } from '../app/roomSlice';\nimport startOver from '../assets/images/start-over.svg';\nimport forward from '../assets/images/forward.svg';\nimport add from '../assets/images/add.svg';\nimport arrange from '../assets/images/arrange.svg';\nimport { Dimension } from '../models/general';\n\ninterface DeskEditorProps {\n  menu: ReactNode;\n  redirect: (path: string) => void;\n}\n\nexport const DeskEditor = ({\n  menu,\n  redirect\n}: DeskEditorProps) => {\n  const dispatch = useDispatch();\n  const [roomDimension, setRoomDimension] = useState<Dimension>({ width: 0, height: 0 }),\n    [desksDimension, setDesksDimension] = useState<{ [id: string]: Dimension }>({}),\n    [readyToArrange, setReadyToArrange] = useState([false, false]);\n  const room = useSelector(selectCurrentRoom),\n    deskCount = useSelector(selectDeskCount),\n    allDesks = useSelector(selectAllDesks),\n    newVersion = useSelector(selectNewVersion),\n    isEmpty = useSelector(selectIsEmpty);\n\n  // Redirect back if we have nothing in room\n  useEffect(() => {\n    if (isEmpty) {\n      onStartOver();\n    }\n  });\n\n  // Internal handlers\n  const onStartOver = () => {\n    redirect('/');\n  };\n  const onNext = () => {\n    redirect('/students');\n  };\n  const onAddDesk = () => {\n    dispatch(addDesk());\n  };\n  const onArrange = useCallback(() => {\n    const containerRect = roomDimension;\n\n    // Make there are desks to arrange\n    if (deskCount === 0) {\n      return;\n    }\n\n    const deskRect = Object.values(desksDimension)[0];\n    if (!deskRect) {\n      throw new Error('Missing a desk dimension');\n    }\n\n    // Calculate number of columns/rows\n    const maxColumns = Math.floor(containerRect.width / deskRect.width),\n      maxRows = Math.floor(containerRect.height / deskRect.height);\n    if (maxColumns * maxRows < deskCount) {\n      throw new Error('Too many desks to arrange');\n    }\n\n    // Change columns/rows to match the number of items\n    let columns = 1, rows = 1;\n    while (columns * rows < deskCount) {\n      if (columns < rows && (columns < maxColumns || rows >= maxRows)) {\n        columns++;\n      }\n      else {\n        rows++;\n      }\n    }\n\n    // Calculate column/row size and center position\n    const width = containerRect.width / columns,\n      height = containerRect.height / rows;\n    const left = width / 2.0 - deskRect.width / 2.0,\n      top = height / 2.0 - deskRect.height / 2.0;\n\n    //Place each desk under column/row\n    allDesks.forEach((desk, index) => {\n      const column = index % columns,\n        row = Math.floor(index / columns);\n      dispatch(moveDesk(desk.id, column * width + left, row * height + top));\n    });\n  }, [dispatch, roomDimension, desksDimension, deskCount, allDesks]);\n\n  // External handlers\n  const onEditName = (name: string) => {\n    dispatch(editRoomName(name));\n  };\n\n  // Dimension call backs\n  const onEditDimension = useCallback((rect: Dimension) => {\n    setRoomDimension(rect);\n    setReadyToArrange(previous => {\n      return [true, previous[1]];\n    });\n  }, []);\n  const onDeskEditDimension = useCallback((id: string, rect: Dimension) => {\n    setDesksDimension(previous => {\n      const dimensions = Object.assign({}, previous);\n      dimensions[id] = rect;\n      return dimensions;\n    });\n    setReadyToArrange(previous => {\n      return [previous[0], true];\n    });\n  }, []);\n\n  const onMoveDesk = (id: string, x: number, y: number) => {\n    dispatch(moveDesk(id, x, y));\n  };\n  const onRotateDesk = (id: string, angle: number) => {\n    dispatch(rotateDesk(id, angle));\n  };\n  const onRemoveDesk = (id: string) => {\n    const dimensions = Object.assign({}, desksDimension);\n    delete dimensions[id];\n    setDesksDimension(dimensions);\n    dispatch(removeDesk(id));\n  };\n\n  // Automatically arrange new room versions and after specifically state automatic arrangement has happened\n  useEffect(() => {\n    if (newVersion && readyToArrange.reduce((a, b) => a && b)) {\n      onArrange();\n      dispatch(toggleNewVersion(false));\n    }\n  }, [dispatch, readyToArrange, onArrange, newVersion])\n\n  return (\n    <div className=\"view-desk-editor\">\n      {menu}\n      <nav className=\"pure-menu\">\n        <Header />\n        <p>Provide the arrangement of desks for the room.</p>\n        <ul className=\"pure-menu-list\">\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onNext}>\n            <img src={forward} alt=\"Next\" /> Next\n            </li>\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onStartOver}>\n            <img src={startOver} alt=\"Start Over\" /> Start Over\n            </li>\n        </ul>\n        <h3>Edit</h3>\n        <ul className=\"pure-menu-list menu-bottom\">\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onAddDesk}>\n            <img src={add} alt=\"Add Desk\" /> Add Desk\n            </li>\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onArrange}>\n            <img src={arrange} alt=\"Arrange\" /> Arrange\n            </li>\n        </ul>\n      </nav>\n      <main>\n        <Room room={room} editable={true} editName={onEditName} editDimension={onEditDimension} moveDesk={onMoveDesk} rotateDesk={onRotateDesk} removeDesk={onRemoveDesk} deskEditDimension={onDeskEditDimension} />\n      </main>\n    </div>\n  );\n};\n\nexport default DeskEditor;\n","import React, { ChangeEvent } from 'react';\nimport MultiSelect from 'react-multi-select-component';\nimport styles from './Student.module.css';\nimport { CoreStudent, Students } from '../models/students';\nimport { toArray } from '../utils/collection';\n\ntype PreferenceChange = (id: string, preference: string) => void;\n\ninterface StudentProps {\n  student: CoreStudent;\n  students: Students;\n  editName: (id: string, name: string) => void;\n  addPreference: PreferenceChange;\n  removePreference: PreferenceChange;\n}\n\nexport interface Option {\n  label: string;\n  value: string;\n}\n\n// Export this so it can be tested easily\nexport const preferenceChange = (\n  student: CoreStudent,\n  students: Students,\n  selected: Option[],\n  addPreference: PreferenceChange,\n  removePreference: PreferenceChange\n) => {\n  const existingPreferences = students.preferences[student.id],\n    changedPreferences = selected.map(select => select.value);\n  const newPreferences = changedPreferences.filter(id => !existingPreferences.includes(id)),\n    removedPreferences = existingPreferences.filter(id => !changedPreferences.includes(id));\n\n  removedPreferences.forEach(id => removePreference(student.id, id));\n  newPreferences.forEach(id => addPreference(student.id, id));\n};\n\nconst Student = ({\n  student,\n  students,\n  editName,\n  addPreference,\n  removePreference\n}: StudentProps) => {\n  const studentOptions: Option[] = toArray(students).filter(s => s.id !== student.id).map(s => {\n    return {\n      label: s.name,\n      value: s.id\n    };\n  });\n  const preferenceOptions = studentOptions.filter(option => students.preferences[student.id].includes(option.value));\n\n  const onNameChange = (event: ChangeEvent) => {\n    const name = (event.target as HTMLInputElement).value;\n    editName(student.id, name);\n  };\n  const onPreferenceChange = (selected: Option[]) => {\n    preferenceChange(student, students, selected, addPreference, removePreference);\n  };\n\n  return (\n    <div className={styles.student}>\n      <div className={styles.name}>\n        <input type=\"text\" value={student.name} onChange={onNameChange} placeholder=\"Student name\" />\n      </div>\n      <MultiSelect\n        labelledBy=\"\"\n        options={studentOptions}\n        value={preferenceOptions}\n        overrideStrings={{ selectSomeItems: 'Student preferences' }}\n        disableSearch={true}\n        hasSelectAll={false}\n        isLoading={false}\n        onChange={onPreferenceChange}\n        className={styles.multiselect}\n      />\n    </div >\n  );\n};\n\nexport default Student;\n","import React, { ReactNode, useEffect } from 'react';\nimport Header from '../components/Header';\nimport { selectIsEmpty, selectCurrentRoom } from '../app/rootSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport startOver from '../assets/images/start-over.svg';\nimport forward from '../assets/images/forward.svg';\nimport back from '../assets/images/back.svg';\nimport Student from '../components/Student';\nimport { toArray } from '../utils/collection';\nimport { addStudentPreference, removeStudentPreference, editStudentName, arrange } from '../app/roomSlice';\n\ninterface StudentEditorProps {\n  menu: ReactNode;\n  redirect: (path: string) => void;\n}\n\nexport const StudentEditor = ({\n  menu,\n  redirect\n}: StudentEditorProps) => {\n  const dispatch = useDispatch();\n  const isEmpty = useSelector(selectIsEmpty),\n    room = useSelector(selectCurrentRoom);\n\n  // Redirect back if we have nothing in room\n  useEffect(() => {\n    if (isEmpty) {\n      onStartOver();\n    }\n  });\n\n  // Internal handlers\n  const onStartOver = () => redirect('/');\n  const onNext = () => {\n    dispatch(arrange());\n    redirect('/report');\n  };\n  const onPrevious = () => redirect('/desks');\n\n  const onEditName = (id: string, name: string) => {\n    dispatch(editStudentName({ id, name }));\n  };\n  const onAddPreference = (id: string, preference: string) => {\n    dispatch(addStudentPreference({ id, preference }));\n  };\n  const onRemovePreference = (id: string, preference: string) => {\n    dispatch(removeStudentPreference({ id, preference }));\n  };\n\n  return (\n    <div className=\"view-student-editor\">\n      {menu}\n      <nav className=\"pure-menu\">\n        <Header />\n        <p>Provide the name of each student and their preferences.</p>\n        <ul className=\"pure-menu-list\">\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onNext}>\n            <img src={forward} alt=\"Next\" /> Next\n        </li>\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onPrevious}>\n            <img src={back} alt=\"Previous\" /> Previous\n        </li>\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onStartOver}>\n            <img src={startOver} alt=\"Start Over\" /> Start Over\n        </li>\n        </ul >\n      </nav >\n      <main>\n        <h2>Students</h2>\n        {toArray(room.students).map(student => {\n          return (\n            <Student key={student.id} student={student} students={room.students} addPreference={onAddPreference} editName={onEditName} removePreference={onRemovePreference} />\n          );\n        })}\n      </main>\n    </div >\n  );\n};\n\nexport default StudentEditor;\n","import React, { ReactNode, useEffect } from 'react';\nimport Header from '../components/Header';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCurrentRoom, selectIsEmpty } from '../app/rootSlice';\nimport Room from '../components/Room';\nimport startOver from '../assets/images/start-over.svg';\nimport back from '../assets/images/back.svg';\nimport save from '../assets/images/save.svg';\nimport print from '../assets/images/print.svg';\nimport { saveVersion } from '../app/appSlice';\n\ninterface ReportViewerProps {\n  menu: ReactNode;\n  redirect: (path: string) => void;\n}\n\nexport const ReportViewer = ({\n  menu,\n  redirect\n}: ReportViewerProps) => {\n  const dispatch = useDispatch();\n  const room = useSelector(selectCurrentRoom),\n    isEmpty = useSelector(selectIsEmpty);\n\n  // Redirect back if we have nothing in room\n  useEffect(() => {\n    if (isEmpty) {\n      onStartOver();\n    }\n  });\n\n  // Internal handlers\n  const onStartOver = () => redirect('/');\n  const onPrevious = () => redirect('/students');\n  const onPrint = window.print;\n  const onSave = async () => {\n    await dispatch(saveVersion(window.localStorage, room));\n    window.alert(\"Room has been saved\");\n  };\n\n  return (\n    <div className=\"view-report-viewer\">\n      {menu}\n      <nav className=\"pure-menu\">\n        <Header />\n        <p>Print, save for later, or start new.</p>\n        <ul className=\"pure-menu-list\">\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onPrevious}>\n            <img src={back} alt=\"Previous\" /> Previous\n        </li>\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onStartOver}>\n            <img src={startOver} alt=\"Start Over\" /> Start Over\n        </li>\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onPrint}>\n            <img src={print} alt=\"Print\" /> Print\n        </li>\n          <li className=\"pure-menu-item pure-menu-link\" onClick={onSave}>\n            <img src={save} alt=\"Save\" /> Save\n        </li >\n        </ul >\n      </nav >\n      <main>\n        <Room room={room} editable={false} />\n      </main>\n    </div >\n  );\n};\n\nexport default ReportViewer;\n","import React, { MouseEvent } from 'react';\nimport styles from './Hamburger.module.css';\n\ninterface BurgerProps {\n  expanded: boolean,\n  toggle: () => void\n}\n\nconst Hamburger = ({\n  expanded,\n  toggle\n}: BurgerProps) => {\n  const onToggle = (event: MouseEvent) => {\n    event.preventDefault();\n    toggle();\n  }\n\n  let classes = styles.hamburger;\n  if (expanded) {\n    classes += ' ' + styles.expanded;\n  }\n\n  return (\n    <div className={classes} onClick={onToggle} title={expanded ? 'Collapse' : 'Expand'} role=\"button\" aria-pressed={expanded}>\n      <span></span>\n    </div>\n  );\n};\nexport default Hamburger;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectExpanded } from './rootSlice';\nimport {\n  Switch,\n  Route,\n  useHistory\n} from 'react-router-dom';\nimport 'purecss';\nimport './App.css';\nimport VersionSelector from '../views/VersionSelector';\nimport DeskEditor from '../views/DeskEditor';\nimport StudentEditor from '../views/StudentEditor';\nimport ReportViewer from '../views/ReportViewer';\nimport { toggle } from './appSlice';\nimport Hamburger from '../components/Hamburger';\n\nconst App: FunctionComponent = () => {\n  const expanded = useSelector(selectExpanded);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const onToggle = useCallback(\n    () => dispatch(toggle()),\n    [dispatch]\n  );\n\n  const onRedirect = (path: string) => {\n    history.push(path);\n  }\n\n  const menu = () => {\n    return (\n      <Hamburger expanded={expanded} toggle={onToggle} />\n    );\n  };\n\n  return (\n    <div className={expanded ? 'expanded' : ''}>\n      <Switch>\n        <Route path=\"/desks\" >\n          <DeskEditor menu={menu()} redirect={onRedirect} />\n        </Route>\n\n        <Route path=\"/students\">\n          <StudentEditor menu={menu()} redirect={onRedirect} />\n        </Route>\n\n        <Route path=\"/report\">\n          <ReportViewer menu={menu()} redirect={onRedirect} />\n        </Route>\n\n        <Route path=\"/\">\n          <VersionSelector menu={menu()} redirect={onRedirect} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\nexport default App;\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk'\nimport rootReducer, { RootState } from './rootSlice'\n\nconst store = configureStore({\n  reducer: rootReducer\n})\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\nimport { loadVersions } from './app/appSlice';\n\n// Load all versions from local storage\nstore.dispatch(loadVersions(window.localStorage));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}